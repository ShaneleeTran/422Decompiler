00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/21/2017 9:34:34 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU $0D
00000000  =0000000A                  8  LF      EQU $0A       
00000000                             9  
00001000                            10      ORG    $1000
00001000                            11      
00001000                            12  START:                  ; first instruction of program
00001000                            13  
00001000                            14  * Put program code here
00001000  43F9 000012DF             15          LEA     WELCOME_MSG,A1  ; welcome message
00001006  103C 000E                 16          MOVE.B  #14,D0
0000100A  4E4F                      17          TRAP    #15
0000100C  13FC 0000 0000123E        18          MOVE.B  #0,CUR_LINE
00001014                            19          
00001014                            20  USR_IN_STRT
00001014  43F9 00001309             21          LEA     USR_STRT_MSG,A1  ; user start address message
0000101A  103C 000E                 22          MOVE.B  #14,D0
0000101E  4E4F                      23          TRAP    #15
00001020                            24          
00001020  43F9 0000123F             25          LEA     STRT_INPUT,A1
00001026                            26      
00001026  103C 0002                 27          MOVE.B  #2,D0           ;read user input as string
0000102A  4E4F                      28          TRAP    #15
0000102C                            29                
0000102C  4EB9 000010DC             30          JSR     CHECK_INPUT_LEN   ;checks the length of user input
00001032                            31          
00001032  B83C 0001                 32          CMP.B   #1,D4
00001036  6700 0010                 33          BEQ     PASS_LEN_TEST        
0000103A                            34          ;else      
0000103A  43F9 0000133D             35          LEA     BAD_INPUT_MSG,A1
00001040  103C 000E                 36          MOVE.B  #14,D0
00001044  4E4F                      37          TRAP    #15
00001046  60CC                      38          BRA     USR_IN_STRT
00001048                            39          
00001048                            40  PASS_LEN_TEST        
00001048  4EB9 000010F8             41          JSR     ASCII_TO_HEX
0000104E  2A43                      42          MOVEA.L D3,A5
00001050                            43          
00001050  4EB9 0000112A             44          JSR     CHECK_INPUT_ODD
00001056  B83C 0001                 45          CMP.B   #1,D4
0000105A  6700 0004                 46          BEQ     PASS_ODD_TEST
0000105E                            47          ;else
0000105E  60B4                      48          BRA     USR_IN_STRT
00001060                            49          
00001060                            50  PASS_ODD_TEST
00001060  4EB9 00001156             51          JSR     CHECK_INPUT_BOUNDS
00001066  B83C 0000                 52          CMP.B   #0,D4
0000106A  67A8                      53          BEQ     USR_IN_STRT
0000106C  2E03                      54          MOVE.L  D3,D7
0000106E  2A43                      55          MOVEA.L D3,A5
00001070                            56          
00001070                            57  USR_IN_END
00001070  43F9 00001324             58          LEA     USR_END_MSG,A1
00001076  103C 000E                 59          MOVE.B  #14,D0
0000107A  4E4F                      60          TRAP    #15
0000107C                            61          
0000107C  43F9 0000128F             62          LEA     END_INPUT,A1
00001082                            63          
00001082  7002                      64          MOVEQ   #2,D0
00001084  4E4F                      65          TRAP    #15
00001086  4283                      66          CLR.L   D3
00001088                            67          
00001088  4EB9 000010DC             68          JSR     CHECK_INPUT_LEN
0000108E                            69          
0000108E  B83C 0001                 70          CMP.B   #1,D4
00001092  6700 0010                 71          BEQ     PASS_LEN_TEST2
00001096                            72          ;else
00001096  43F9 0000133D             73          LEA     BAD_INPUT_MSG,A1
0000109C  103C 000E                 74          MOVE.B  #14,D0
000010A0  4E4F                      75          TRAP    #15
000010A2  60CC                      76          BRA     USR_IN_END
000010A4                            77          
000010A4                            78  PASS_LEN_TEST2
000010A4  4EB9 000010F8             79          JSR     ASCII_TO_HEX
000010AA  2C43                      80          MOVEA.L D3,A6
000010AC                            81          
000010AC  4EB9 0000112A             82          JSR     CHECK_INPUT_ODD
000010B2  B83C 0001                 83          CMP.B   #1,D4
000010B6  6700 0004                 84          BEQ     PASS_ODD_TEST2
000010BA                            85          ;else
000010BA  60B4                      86          BRA     USR_IN_END
000010BC                            87          
000010BC                            88  PASS_ODD_TEST2
000010BC  4EB9 00001156             89          JSR     CHECK_INPUT_BOUNDS
000010C2  B83C 0000                 90          CMP.B   #0,D4
000010C6  67A8                      91          BEQ     USR_IN_END
000010C8                            92          ;else
000010C8  2C43                      93          MOVEA.L D3,A6
000010CA                            94          
000010CA  544E                      95          ADD     #2,A6
000010CC  43F9 000013B2             96          LEA     WAIT_MSG,A1
000010D2  103C 000E                 97          MOVE.B  #14,D0
000010D6  4E4F                      98          TRAP    #15
000010D8  6000 00C2                 99          BRA     CONT_INPUT
000010DC                           100          
000010DC                           101  ********************************************************************************
000010DC                           102  CHECK_INPUT_LEN
000010DC  4284                     103          CLR.L   D4
000010DE  0C01 0000                104          CMPI.B  #$0,D1   ;if length of Hex is 0
000010E2  6700 0010                105          BEQ     BAD_INPUT
000010E6                           106          ;else        
000010E6  0C01 0008                107          CMPI.B  #$8,D1  ;if length of Hex is greater than 8
000010EA  6E00 0008                108          BGT     BAD_INPUT
000010EE                           109          ;else
000010EE  183C 0001                110          MOVE.B  #$1,D4
000010F2  4E75                     111          RTS
000010F4                           112  
000010F4                           113  ********************************************************************************
000010F4                           114  BAD_INPUT
000010F4  7800                     115          MOVEQ   #$0,D4
000010F6  4E75                     116          RTS
000010F8                           117          
000010F8                           118  ********************************************************************************        
000010F8                           119  ASCII_TO_HEX
000010F8  0C01 0000                120          CMPI.B  #$0,D1
000010FC  6700 002A                121          BEQ     ACII_TO_HEX_FINISHED
00001100  1419                     122          MOVE.B  (A1)+,D2    ;move right one character
00001102  0C02 0039                123          CMPI.B  #$39,D2
00001106  6F00 000A                124          BLE     NUM         ;if the character is a number less than 9      
0000110A                           125          ;else
0000110A                           126  LETTER
0000110A  0402 0037                127          SUBI.B  #$37,D2
0000110E  6000 000A                128          BRA     RESIZE
00001112                           129  
00001112                           130  ********************************************************************************                
00001112                           131  NUM
00001112  0402 0030                132          SUBI.B  #$30,D2
00001116  6000 0002                133          BRA     RESIZE
0000111A                           134  
0000111A                           135  ********************************************************************************
0000111A                           136  RESIZE
0000111A  5301                     137          SUBI.B  #$1,D1
0000111C  D602                     138          ADD.B   D2,D3
0000111E  0C01 0000                139          CMPI.B  #$0,D1
00001122  67D4                     140          BEQ     ASCII_TO_HEX
00001124                           141          ;else        
00001124  E99B                     142          ROL.L   #4,D3   ; rotate left 4 bits to the next char
00001126  60D0                     143          BRA     ASCII_TO_HEX
00001128                           144          
00001128                           145  *******************************************************************************
00001128                           146  ACII_TO_HEX_FINISHED
00001128  4E75                     147          RTS
0000112A                           148  
0000112A                           149  *******************************************************************************
0000112A                           150  CHECK_INPUT_ODD
0000112A  4284                     151          CLR.L   D4
0000112C  4282                     152          CLR.L   D2
0000112E  3403                     153          MOVE.W  D3,D2
00001130  7202                     154          MOVE.L  #$00000002,D1
00001132  84C1                     155          DIVU    D1,D2
00001134  4842                     156          SWAP    D2
00001136  B43C 0001                157          CMP.B   #1,D2
0000113A  6700 0008                158          BEQ     BAD_INPUT_ODD
0000113E                           159          ;else
0000113E  183C 0001                160          MOVE.B  #$1,D4
00001142  4E75                     161          RTS
00001144                           162          
00001144                           163  ******************************************************************************
00001144                           164  BAD_INPUT_ODD
00001144  43F9 0000134F            165          LEA     BAD_INPUT_ODD_MSG,A1
0000114A  103C 000E                166          MOVE.B  #14,D0
0000114E  4E4F                     167          TRAP    #15
00001150  7800                     168          MOVEQ   #$0,D4
00001152  4283                     169          CLR.L   D3
00001154  4E75                     170          RTS
00001156                           171  
00001156                           172  *****************************************************************************        
00001156                           173  CHECK_INPUT_BOUNDS
00001156  4284                     174          CLR.L   D4
00001158  223C 00007000            175          MOVE.L  #LOW_ADDR,D1
0000115E  B681                     176          CMP.L   D1,D3
00001160  6D00 0012                177          BLT     BAD_INPUT_LOW
00001164                           178          ;else
00001164  223C 00FFFFFE            179          MOVE.L  #HIGH_ADDR,D1
0000116A  B681                     180          CMP.L   D1,D3
0000116C  6E00 001A                181          BGT     BAD_INPUT_HIGH
00001170                           182          ;else
00001170  7801                     183          MOVEQ   #$1,D4
00001172  4E75                     184          RTS
00001174                           185          
00001174                           186  *****************************************************************************
00001174                           187  BAD_INPUT_LOW
00001174  43F9 0000137B            188          LEA     BAD_INPUT_LOW_MSG,A1
0000117A  103C 000E                189          MOVE.B  #14,D0
0000117E  4E4F                     190          TRAP    #15
00001180  183C 0000                191          MOVE.B  #$0,D4
00001184  4283                     192          CLR.L   D3
00001186  4E75                     193          RTS
00001188                           194          
00001188                           195  *****************************************************************************
00001188                           196  BAD_INPUT_HIGH
00001188  43F9 00001396            197          LEA     BAD_INPUT_HIGH_MSG,A1
0000118E  103C 000E                198          MOVE.B  #14,D0
00001192  4E4F                     199          TRAP    #15
00001194  183C 0000                200          MOVE.B  #$0,D4
00001198  4283                     201          CLR.L   D3
0000119A  4E75                     202          RTS
0000119C                           203          
0000119C                           204  *****************************************************************************
0000119C                           205  CONT_INPUT
0000119C  103C 000C                206          MOVE.B  #12,D0
000011A0  123C 0000                207          MOVE.B  #0,D1
000011A4  4E4F                     208          TRAP    #15
000011A6                           209          
000011A6  103C 0005                210          MOVE.B  #5,D0        
000011AA  4E4F                     211          TRAP    #15
000011AC                           212          
000011AC  6000 0002                213          BRA     MAIN_LOOP
000011B0                           214  
000011B0                           215  ****************************************************************************
000011B0                           216  MAIN_LOOP     
000011B0  BC5D                     217          CMP.W   (A5)+, D6
000011B2  47F9 000013E0            218          LEA     GOODDATA, A3
000011B8  49F9 000013DC            219          LEA     BADDATA, A4
000011BE  4EB9 000011F4            220          JSR     ADDRPRNT
000011C4  4EB9 000011FA            221          JSR     DSMBLE
000011CA  16FC 0000                222          MOVE.B  #$00, (A3)+
000011CE  43F9 000013E0            223          LEA     GOODDATA, A1
000011D4  700D                     224          MOVEQ   #13,D0
000011D6  4E4F                     225          TRAP    #15
000011D8                           226  END_LOOP
000011D8  BCCD                     227          CMP.W   A5,A6
000011DA  6700 005E                228          BEQ     END
000011DE  BACE                     229          CMP.W   A6,A5
000011E0  6E00 0058                230          BGT     END
000011E4  5239 0000123E            231          ADD.B   #1, CUR_LINE
000011EA  0C39 001D 0000123E       232          CMP.B   #29, CUR_LINE
000011F2  60BC                     233          BRA     MAIN_LOOP
000011F4                           234  
000011F4                           235  
000011F4                           236  ADDRPRNT
000011F4  7008                     237          MOVEQ   #8, D0
000011F6  280D                     238          MOVE.L  A5, D4
000011F8  5504                     239          SUB.B   #2, D4
000011FA                           240  
000011FA                           241  DSMBLE  
000011FA  4201                     242          CLR.B D1
000011FC  3A06                     243          MOVE.W D6,D5
000011FE  E04D                     244          LSR.W #8, D5
00001200  E84D                     245          LSR.W #4, D5
00001202  CAFC 0008                246          MULU #8, D5
00001206  41F9 00001212            247          LEA FIRSTJMP, A0
0000120C  4EB0 5000                248          JSR (A0,D5)
00001210  4E75                     249          RTS
00001212                           250  
00001212                           251  ****************************************************************************
00001212                           252  FIRSTJMP
00001212  4EB9 00001218            253          JSR     FIRST0001
00001218                           254          
00001218                           255  FIRST0001
00001218  16FC 004D                256          MOVE.B  #'M',(A3)+                  Insert M into the output
0000121C  16FC 004F                257          MOVE.B  #'O',(A3)+                  Insert O into the output
00001220  16FC 0056                258          MOVE.B  #'V',(A3)+                  Insert V into the output
00001224  16FC 0045                259          MOVE.B  #'E',(A3)+                  Insert E into the output
00001228  16FC 002E                260          MOVE.B  #'.',(A3)+                  Insert . into the output
0000122C  16FC 0042                261          MOVE.B  #'B',(A3)+                  Insert B into the output
00001230  16FC 0020                262          MOVE.B  #' ',(A3)+                  Insert a space into the output
00001234  16FC 0020                263          MOVE.B  #' ',(A3)+                  Insert a space into the output
00001238                           264      
00001238  4E75                     265          RTS                                 Return the instruction
0000123A                           266  
0000123A                           267          
0000123A                           268  END                
0000123A  FFFF FFFF                269      SIMHALT             ; halt simulator
0000123E                           270                 
0000123E                           271  
0000123E                           272  * Put variables and constants here
0000123E                           273  CUR_LINE    DS.B    1
0000123F                           274  STRT_INPUT  DS.B    80
0000128F                           275  END_INPUT   DS.B    80
000012DF= 53 68 61 6E 65 6C ...    276  WELCOME_MSG DC.B    'Shanelee Tran and Tyler Do Disassembler',CR,LF,0
00001309= 0D 0A 45 6E 74 65 ...    277  USR_STRT_MSG    DC.B    CR,LF,'Enter starting address: ',0
00001324= 0D 0A 45 6E 74 65 ...    278  USR_END_MSG    DC.B    CR,LF,'Enter ending address: ',0
0000133D= 0D 0A 49 6E 76 61 ...    279  BAD_INPUT_MSG   DC.B    CR,LF,'Invalid address',0
0000134F= 0D 0A 49 6E 76 61 ...    280  BAD_INPUT_ODD_MSG   DC.B    CR,LF,'Invalid address, no odd addresses allowed',0
0000137B= 0D 0A 49 6E 76 61 ...    281  BAD_INPUT_LOW_MSG   DC.B    CR,LF,'Invalid address, too low',0
00001396= 0D 0A 49 6E 76 61 ...    282  BAD_INPUT_HIGH_MSG  DC.B    CR,LF,'Invalid address, too high',0
000013B2= 0D 0A 50 72 65 73 ...    283  WAIT_MSG    DC.B    CR,LF,'Press any key to continue',0
000013CE= 0D 0A 79 6F 75 20 ...    284  TEST_MSG    DC.B    CR,LF,'you made it',0
000013DC= 00000001                 285  BADDATA DC.L 1
000013E0= 00000001                 286  GOODDATA DC.L 1
000013E4                           287  
000013E4  =00007000                288  LOW_ADDR    EQU     $00007000
000013E4  =00FFFFFE                289  HIGH_ADDR   EQU     $00FFFFFE
000013E4                           290      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACII_TO_HEX_FINISHED  1128
ADDRPRNT            11F4
ASCII_TO_HEX        10F8
BADDATA             13DC
BAD_INPUT           10F4
BAD_INPUT_HIGH      1188
BAD_INPUT_HIGH_MSG  1396
BAD_INPUT_LOW       1174
BAD_INPUT_LOW_MSG   137B
BAD_INPUT_MSG       133D
BAD_INPUT_ODD       1144
BAD_INPUT_ODD_MSG   134F
CHECK_INPUT_BOUNDS  1156
CHECK_INPUT_LEN     10DC
CHECK_INPUT_ODD     112A
CONT_INPUT          119C
CR                  D
CUR_LINE            123E
DSMBLE              11FA
END                 123A
END_INPUT           128F
END_LOOP            11D8
FIRST0001           1218
FIRSTJMP            1212
GOODDATA            13E0
HIGH_ADDR           FFFFFE
LETTER              110A
LF                  A
LOW_ADDR            7000
MAIN_LOOP           11B0
NUM                 1112
PASS_LEN_TEST       1048
PASS_LEN_TEST2      10A4
PASS_ODD_TEST       1060
PASS_ODD_TEST2      10BC
RESIZE              111A
START               1000
STRT_INPUT          123F
TEST_MSG            13CE
USR_END_MSG         1324
USR_IN_END          1070
USR_IN_STRT         1014
USR_STRT_MSG        1309
WAIT_MSG            13B2
WELCOME_MSG         12DF
