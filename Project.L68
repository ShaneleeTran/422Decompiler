00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 5/21/2017 9:24:29 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR      EQU $0D
00000000  =0000000A                  8  LF      EQU $0A       
00000000                             9  
00001000                            10      ORG    $1000
00001000                            11      
00001000                            12  START:                  ; first instruction of program
00001000                            13  
00001000                            14  * Put program code here
00001000  43F9 000012DD             15          LEA     WELCOME_MSG,A1  ; welcome message
00001006  103C 000E                 16          MOVE.B  #14,D0
0000100A  4E4F                      17          TRAP    #15
0000100C  13FC 0000 0000123C        18          MOVE.B  #0,CUR_LINE
00001014                            19          
00001014                            20  USR_IN_STRT
00001014  43F9 00001307             21          LEA     USR_STRT_MSG,A1  ; user start address message
0000101A  103C 000E                 22          MOVE.B  #14,D0
0000101E  4E4F                      23          TRAP    #15
00001020                            24          
00001020  43F9 0000123D             25          LEA     STRT_INPUT,A1
00001026                            26      
00001026  103C 0002                 27          MOVE.B  #2,D0           ;read user input as string
0000102A  4E4F                      28          TRAP    #15
0000102C                            29                
0000102C  4EB9 000010DA             30          JSR     CHECK_INPUT_LEN   ;checks the length of user input
00001032                            31          
00001032  B83C 0001                 32          CMP.B   #1,D4
00001036  6700 0010                 33          BEQ     PASS_LEN_TEST        
0000103A                            34          ;else      
0000103A  43F9 0000133B             35          LEA     BAD_INPUT_MSG,A1
00001040  103C 000E                 36          MOVE.B  #14,D0
00001044  4E4F                      37          TRAP    #15
00001046  60CC                      38          BRA     USR_IN_STRT
00001048                            39          
00001048                            40  PASS_LEN_TEST        
00001048  4EB9 000010F6             41          JSR     ASCII_TO_HEX
0000104E  2A43                      42          MOVEA.L D3,A5
00001050                            43          
00001050  4EB9 00001128             44          JSR     CHECK_INPUT_ODD
00001056  B83C 0001                 45          CMP.B   #1,D4
0000105A  6700 0004                 46          BEQ     PASS_ODD_TEST
0000105E                            47          ;else
0000105E  60B4                      48          BRA     USR_IN_STRT
00001060                            49          
00001060                            50  PASS_ODD_TEST
00001060  4EB9 00001154             51          JSR     CHECK_INPUT_BOUNDS
00001066  B83C 0000                 52          CMP.B   #0,D4
0000106A  67A8                      53          BEQ     USR_IN_STRT
0000106C  2E03                      54          MOVE.L  D3,D7
0000106E  2A43                      55          MOVEA.L D3,A5
00001070                            56          
00001070                            57  USR_IN_END
00001070  43F9 00001322             58          LEA     USR_END_MSG,A1
00001076  103C 000E                 59          MOVE.B  #14,D0
0000107A  4E4F                      60          TRAP    #15
0000107C                            61          
0000107C  43F9 0000128D             62          LEA     END_INPUT,A1
00001082                            63          
00001082  7002                      64          MOVEQ   #2,D0
00001084  4E4F                      65          TRAP    #15
00001086                            66          
00001086  4EB9 000010DA             67          JSR     CHECK_INPUT_LEN
0000108C                            68          
0000108C  B83C 0001                 69          CMP.B   #1,D4
00001090  6700 0010                 70          BEQ     PASS_LEN_TEST2
00001094                            71          ;else
00001094  43F9 0000133B             72          LEA     BAD_INPUT_MSG,A1
0000109A  103C 000E                 73          MOVE.B  #14,D0
0000109E  4E4F                      74          TRAP    #15
000010A0  60CE                      75          BRA     USR_IN_END
000010A2                            76          
000010A2                            77  PASS_LEN_TEST2
000010A2  4EB9 000010F6             78          JSR     ASCII_TO_HEX
000010A8  2C43                      79          MOVEA.L D3,A6
000010AA                            80          
000010AA  4EB9 00001128             81          JSR     CHECK_INPUT_ODD
000010B0  B83C 0001                 82          CMP.B   #1,D4
000010B4  6700 0004                 83          BEQ     PASS_ODD_TEST2
000010B8                            84          ;else
000010B8  60B6                      85          BRA     USR_IN_END
000010BA                            86          
000010BA                            87  PASS_ODD_TEST2
000010BA  4EB9 00001154             88          JSR     CHECK_INPUT_BOUNDS
000010C0  B83C 0000                 89          CMP.B   #0,D4
000010C4  67AA                      90          BEQ     USR_IN_END
000010C6                            91          ;else
000010C6  2C43                      92          MOVEA.L D3,A6
000010C8                            93          
000010C8  544E                      94          ADD     #2,A6
000010CA  43F9 000013B0             95          LEA     WAIT_MSG,A1
000010D0  103C 000E                 96          MOVE.B  #14,D0
000010D4  4E4F                      97          TRAP    #15
000010D6  6000 00C2                 98          BRA     CONT_INPUT
000010DA                            99          
000010DA                           100  ********************************************************************************
000010DA                           101  CHECK_INPUT_LEN
000010DA  4284                     102          CLR.L   D4
000010DC  0C01 0000                103          CMPI.B  #$0,D1   ;if length of Hex is 0
000010E0  6700 0010                104          BEQ     BAD_INPUT
000010E4                           105          ;else        
000010E4  0C01 0008                106          CMPI.B  #$8,D1  ;if length of Hex is greater than 8
000010E8  6E00 0008                107          BGT     BAD_INPUT
000010EC                           108          ;else
000010EC  183C 0001                109          MOVE.B  #$1,D4
000010F0  4E75                     110          RTS
000010F2                           111  
000010F2                           112  ********************************************************************************
000010F2                           113  BAD_INPUT
000010F2  7800                     114          MOVEQ   #$0,D4
000010F4  4E75                     115          RTS
000010F6                           116          
000010F6                           117  ********************************************************************************        
000010F6                           118  ASCII_TO_HEX
000010F6  0C01 0000                119          CMPI.B  #$0,D1
000010FA  6700 002A                120          BEQ     ACII_TO_HEX_FINISHED
000010FE  1419                     121          MOVE.B  (A1)+,D2    ;move right one character
00001100  0C02 0039                122          CMPI.B  #$39,D2
00001104  6F00 000A                123          BLE     NUM         ;if the character is a number less than 9      
00001108                           124          ;else
00001108                           125  LETTER
00001108  0402 0037                126          SUBI.B  #$37,D2
0000110C  6000 000A                127          BRA     RESIZE
00001110                           128  
00001110                           129  ********************************************************************************                
00001110                           130  NUM
00001110  0402 0030                131          SUBI.B  #$30,D2
00001114  6000 0002                132          BRA     RESIZE
00001118                           133  
00001118                           134  ********************************************************************************
00001118                           135  RESIZE
00001118  5301                     136          SUBI.B  #$1,D1
0000111A  D602                     137          ADD.B   D2,D3
0000111C  0C01 0000                138          CMPI.B  #$0,D1
00001120  67D4                     139          BEQ     ASCII_TO_HEX
00001122                           140          ;else        
00001122  E99B                     141          ROL.L   #4,D3   ; rotate left 4 bits to the next char
00001124  60D0                     142          BRA     ASCII_TO_HEX
00001126                           143          
00001126                           144  *******************************************************************************
00001126                           145  ACII_TO_HEX_FINISHED
00001126  4E75                     146          RTS
00001128                           147  
00001128                           148  *******************************************************************************
00001128                           149  CHECK_INPUT_ODD
00001128  4284                     150          CLR.L   D4
0000112A  4282                     151          CLR.L   D2
0000112C  3403                     152          MOVE.W  D3,D2
0000112E  7202                     153          MOVE.L  #$00000002,D1
00001130  84C1                     154          DIVU    D1,D2
00001132  4842                     155          SWAP    D2
00001134  B43C 0001                156          CMP.B   #1,D2
00001138  6700 0008                157          BEQ     BAD_INPUT_ODD
0000113C                           158          ;else
0000113C  183C 0001                159          MOVE.B  #$1,D4
00001140  4E75                     160          RTS
00001142                           161          
00001142                           162  ******************************************************************************
00001142                           163  BAD_INPUT_ODD
00001142  43F9 0000134D            164          LEA     BAD_INPUT_ODD_MSG,A1
00001148  103C 000E                165          MOVE.B  #14,D0
0000114C  4E4F                     166          TRAP    #15
0000114E  7800                     167          MOVEQ   #$0,D4
00001150  4283                     168          CLR.L   D3
00001152  4E75                     169          RTS
00001154                           170  
00001154                           171  *****************************************************************************        
00001154                           172  CHECK_INPUT_BOUNDS
00001154  4284                     173          CLR.L   D4
00001156  223C 00007000            174          MOVE.L  #LOW_ADDR,D1
0000115C  B681                     175          CMP.L   D1,D3
0000115E  6D00 0012                176          BLT     BAD_INPUT_LOW
00001162                           177          ;else
00001162  223C 00FFFFFE            178          MOVE.L  #HIGH_ADDR,D1
00001168  B681                     179          CMP.L   D1,D3
0000116A  6E00 001A                180          BGT     BAD_INPUT_HIGH
0000116E                           181          ;else
0000116E  7801                     182          MOVEQ   #$1,D4
00001170  4E75                     183          RTS
00001172                           184          
00001172                           185  *****************************************************************************
00001172                           186  BAD_INPUT_LOW
00001172  43F9 00001379            187          LEA     BAD_INPUT_LOW_MSG,A1
00001178  103C 000E                188          MOVE.B  #14,D0
0000117C  4E4F                     189          TRAP    #15
0000117E  183C 0000                190          MOVE.B  #$0,D4
00001182  4283                     191          CLR.L   D3
00001184  4E75                     192          RTS
00001186                           193          
00001186                           194  *****************************************************************************
00001186                           195  BAD_INPUT_HIGH
00001186  43F9 00001394            196          LEA     BAD_INPUT_HIGH_MSG,A1
0000118C  103C 000E                197          MOVE.B  #14,D0
00001190  4E4F                     198          TRAP    #15
00001192  183C 0000                199          MOVE.B  #$0,D4
00001196  4283                     200          CLR.L   D3
00001198  4E75                     201          RTS
0000119A                           202          
0000119A                           203  *****************************************************************************
0000119A                           204  CONT_INPUT
0000119A  103C 000C                205          MOVE.B  #12,D0
0000119E  123C 0000                206          MOVE.B  #0,D1
000011A2  4E4F                     207          TRAP    #15
000011A4                           208          
000011A4  103C 0005                209          MOVE.B  #5,D0        
000011A8  4E4F                     210          TRAP    #15
000011AA                           211          
000011AA  6000 0002                212          BRA     MAIN_LOOP
000011AE                           213  
000011AE                           214  ****************************************************************************
000011AE                           215  MAIN_LOOP     
000011AE  BC5D                     216          CMP.W   (A5)+, D6
000011B0  47F9 000013DE            217          LEA     GOODDATA, A3
000011B6  49F9 000013DA            218          LEA     BADDATA, A4
000011BC  4EB9 000011F2            219          JSR     ADDRPRNT
000011C2  4EB9 000011F8            220          JSR     DSMBLE
000011C8  16FC 0000                221          MOVE.B  #$00, (A3)+
000011CC  43F9 000013DE            222          LEA     GOODDATA, A1
000011D2  700D                     223          MOVEQ   #13,D0
000011D4  4E4F                     224          TRAP    #15
000011D6                           225  END_LOOP
000011D6  BCCD                     226          CMP.W   A5,A6
000011D8  6700 005E                227          BEQ     END
000011DC  BACE                     228          CMP.W   A6,A5
000011DE  6E00 0058                229          BGT     END
000011E2  5239 0000123C            230          ADD.B   #1, CUR_LINE
000011E8  0C39 001D 0000123C       231          CMP.B   #29, CUR_LINE
000011F0  60BC                     232          BRA     MAIN_LOOP
000011F2                           233  
000011F2                           234  
000011F2                           235  ADDRPRNT
000011F2  7008                     236          MOVEQ   #8, D0
000011F4  280D                     237          MOVE.L  A5, D4
000011F6  5504                     238          SUB.B   #2, D4
000011F8                           239  
000011F8                           240  DSMBLE  
000011F8  4201                     241          CLR.B D1
000011FA  3A06                     242          MOVE.W D6,D5
000011FC  E04D                     243          LSR.W #8, D5
000011FE  E84D                     244          LSR.W #4, D5
00001200  CAFC 0008                245          MULU #8, D5
00001204  41F9 00001210            246          LEA FIRSTJMP, A0
0000120A  4EB0 5000                247          JSR (A0,D5)
0000120E  4E75                     248          RTS
00001210                           249  
00001210                           250  ****************************************************************************
00001210                           251  FIRSTJMP
00001210  4EB9 00001216            252          JSR     FIRST0001
00001216                           253          
00001216                           254  FIRST0001
00001216  16FC 004D                255          MOVE.B  #'M',(A3)+                  Insert M into the output
0000121A  16FC 004F                256          MOVE.B  #'O',(A3)+                  Insert O into the output
0000121E  16FC 0056                257          MOVE.B  #'V',(A3)+                  Insert V into the output
00001222  16FC 0045                258          MOVE.B  #'E',(A3)+                  Insert E into the output
00001226  16FC 002E                259          MOVE.B  #'.',(A3)+                  Insert . into the output
0000122A  16FC 0042                260          MOVE.B  #'B',(A3)+                  Insert B into the output
0000122E  16FC 0020                261          MOVE.B  #' ',(A3)+                  Insert a space into the output
00001232  16FC 0020                262          MOVE.B  #' ',(A3)+                  Insert a space into the output
00001236                           263      
00001236  4E75                     264          RTS                                 Return the instruction
00001238                           265  
00001238                           266          
00001238                           267  END                
00001238  FFFF FFFF                268      SIMHALT             ; halt simulator
0000123C                           269                 
0000123C                           270  
0000123C                           271  * Put variables and constants here
0000123C                           272  CUR_LINE    DS.B    1
0000123D                           273  STRT_INPUT  DS.B    80
0000128D                           274  END_INPUT   DS.B    80
000012DD= 53 68 61 6E 65 6C ...    275  WELCOME_MSG DC.B    'Shanelee Tran and Tyler Do Disassembler',CR,LF,0
00001307= 0D 0A 45 6E 74 65 ...    276  USR_STRT_MSG    DC.B    CR,LF,'Enter starting address: ',0
00001322= 0D 0A 45 6E 74 65 ...    277  USR_END_MSG    DC.B    CR,LF,'Enter ending address: ',0
0000133B= 0D 0A 49 6E 76 61 ...    278  BAD_INPUT_MSG   DC.B    CR,LF,'Invalid address',0
0000134D= 0D 0A 49 6E 76 61 ...    279  BAD_INPUT_ODD_MSG   DC.B    CR,LF,'Invalid address, no odd addresses allowed',0
00001379= 0D 0A 49 6E 76 61 ...    280  BAD_INPUT_LOW_MSG   DC.B    CR,LF,'Invalid address, too low',0
00001394= 0D 0A 49 6E 76 61 ...    281  BAD_INPUT_HIGH_MSG  DC.B    CR,LF,'Invalid address, too high',0
000013B0= 0D 0A 50 72 65 73 ...    282  WAIT_MSG    DC.B    CR,LF,'Press any key to continue',0
000013CC= 0D 0A 79 6F 75 20 ...    283  TEST_MSG    DC.B    CR,LF,'you made it',0
000013DA= 00000001                 284  BADDATA DC.L 1
000013DE= 00000001                 285  GOODDATA DC.L 1
000013E2                           286  
000013E2  =00007000                287  LOW_ADDR    EQU     $00007000
000013E2  =00FFFFFE                288  HIGH_ADDR   EQU     $00FFFFFE
000013E2                           289      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACII_TO_HEX_FINISHED  1126
ADDRPRNT            11F2
ASCII_TO_HEX        10F6
BADDATA             13DA
BAD_INPUT           10F2
BAD_INPUT_HIGH      1186
BAD_INPUT_HIGH_MSG  1394
BAD_INPUT_LOW       1172
BAD_INPUT_LOW_MSG   1379
BAD_INPUT_MSG       133B
BAD_INPUT_ODD       1142
BAD_INPUT_ODD_MSG   134D
CHECK_INPUT_BOUNDS  1154
CHECK_INPUT_LEN     10DA
CHECK_INPUT_ODD     1128
CONT_INPUT          119A
CR                  D
CUR_LINE            123C
DSMBLE              11F8
END                 1238
END_INPUT           128D
END_LOOP            11D6
FIRST0001           1216
FIRSTJMP            1210
GOODDATA            13DE
HIGH_ADDR           FFFFFE
LETTER              1108
LF                  A
LOW_ADDR            7000
MAIN_LOOP           11AE
NUM                 1110
PASS_LEN_TEST       1048
PASS_LEN_TEST2      10A2
PASS_ODD_TEST       1060
PASS_ODD_TEST2      10BA
RESIZE              1118
START               1000
STRT_INPUT          123D
TEST_MSG            13CC
USR_END_MSG         1322
USR_IN_END          1070
USR_IN_STRT         1014
USR_STRT_MSG        1307
WAIT_MSG            13B0
WELCOME_MSG         12DD
